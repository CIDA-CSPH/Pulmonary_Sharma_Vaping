---
title: "Comb-p For Dummies"
author: "Trent Hawkins"
execute: 
  eval: false
engine: knitr
format: html
---

## Motivation

When working on a Methylation project in 2023, I was nearing the end and it was time to run a Differentially Methylated Region (DMR) analysis. A common method to carry out DMR analyses is known as combined-pvalues (comb-p), and the most popular tool for implementing this method is a command-line tool that allows the user to run a series of python code files by executing one line of code. As a novice in python, I was completely overwhelmed with the vast array of options for installing and running this tool. Furthermore, the software is over a decade old, sometimes relying on outdated packages and the documentation is not completely thorough. For python pros, this document will be completely overkill. Its purpose is to document one way that I was able to get the comb-p pipeline involved after much pain and suffering. Don't be scared! It's really straight-forward in the end.

Please note that that the mechanisms behind the inter-workings of comb-p are outside of the scope of this document. For more information, please reference [github](https://github.com/brentp/combined-pvalues/) for comb-p.

## Installing Conda

For those who are not familiar with Python, if you go straight to the comb-p website, and start trying to install comb-p to run from the command line, you have already skipped ahead to the end of this tutorial.

Long story short, Conda is a wonderful virtual environment and package manager for Python that will make your life so much easier. When you download the full distribution of Anaconda, it will download conda (the command-line tool for package and environment management), Anaconda-Navigator (their proprietary GUI for managing packages and environments), and the latest version of Python. Full instructions are available [here](https://docs.anaconda.com/anaconda/install/index.html) for whatever computing environment you might be working in with video instructions. I would recommend following them.

## Setting up a Conda Virtual Environment

It is of utmost importance that you create a **clean** virtual environment especially for running comb-p, and it will need to be running Python 2.7 in order to be compatible with comb-p and its dependencies. If you don't use a clean environment, conda will likely struggle to download comb-p due to all of the package conflicts it will be trying to manage. You can do so by executing the command below in your terminal:

```{bash filename = "Terminal"}
#Create Conda Environment for Comb-p
conda create --name CombpEnv python=2.7

#Activate Conda Environment
conda activate CombpEnv
```

Great! Now you have created your virtual environment, which is running Python 2.7.x, and activated it. You should see the name of your active environment on the left side of your terminal.  

## Setting up the BioConda channel 

BioConda is the channel (place that hosts python libraries) that hosts most bioinformatics tools available for Python. We will be using it in order to install Comb-p. As per the setup guidelines available [here](https://bioconda.github.io/), run the following code to configure the BioConda channel.

```{bash filename = "Terminal"}
conda config --add channels defaults
conda config --add channels bioconda
conda config --add channels conda-forge
conda config --set channel_priority strict
```

Once you have configured the Bioconda Channel, you can ensure that the channels are configured properly by running the following: 

```{bash filename = "Terminal"}
#| eval: true
conda config --show channels
```

If your output matches the output above, you have successfully configured BioConda.

## Installation (Bedtools and Comb-p)

In this section, we will install the following libraries and dependencies in order to create the sorted .bed files and run the comb-p pipeline with annotation capabilities:

1. bedtools
1. combined-pvalues (comb-p)
1. cruzdb (annotation)

Bedtools and Comb-p can both be installed via the BioConda channel that we already configured.

```{bash filename = "Terminal"}
conda install bedtools
conda install combined-pvalues
```

cruzdb is not hosted on BioConda, but can be installed from PyPi using the `pip` command.

```{bash filename = "Terminal"}
pip install cruzdb
```

We will also need to install some of the dependencies of this package, which do not install automatically for whatever reason.

```{bash filename = "Terminal"}
#Just going to install all the packages in one line
conda install sqlalchemy six MySQL-python
```
If all of these installations worked, CONGRATULATIONS! You are finally ready to run the comb-p pipeline!

## Accessing Illumina annotation and creating your first `.bed` file

A `.bed` file is a specific format of plain-text file that defines genetic sequence features to a genetic sequence. What makes a `.bed` file a `.bed` file instead of a `.txt` file is that the first three columns correspond to: 

01. Chromosome Name

    + Chromosome 1, 2, ..., 22, X, Y

02. Chromosome Start

    + Position of the first base of the feature sequence. In a DMR, this will come from the field 'pos' in the Illumina annotation and refers to the base where the probe is binded. 
  
03. Chromosome End

    + Position of the last base of the feature sequence. In a DMR, this can be created as the number from 'pos' \+ 51.

In the case of DMR analysis, there will also be a 4th column which corresponds to **unadjusted** p-values from the EWAS which should have been completed before this point. 

Next, we will need to access annotation data. I will do this part in R, but I am sure there are other ways to access annotation. To access Illumina's annotation, you can use the `getAnnotation` from the package *minfi*, which can be downloaded from BioConductor. You will likely have already needed this package and function before this point. I will use the Illumina EPIC annotation in this example becuase that is what I used for the related project.

```{r filename = "R"}
#| eval: true
#| message: false
#| warning: false
# Load the packages we will need
require(tidyverse)
require(minfi)
require(IlluminaHumanMethylationEPICanno.ilm10b4.hg19) #Annotation
require(data.table) #Read and write large files

#Load in the results from your EWAS (I won't do this part)
#EWAS_res <- read_csv("path/to/your/data")
```

Ok, now that we have everything loaded in, we can get the data we need from the annotation data. As I mentioned previously, we will only need 'Name', "chrom", and "pos" here.

```{r filename = "R"}
#| eval: true
#| message: false
#Get Annotation
annotation.table <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)

#Pull out the columns you need
mapping <- data.frame("Name" = annotation.table$Name,
                      "chrom" = annotation.table$chr,
                      "pos" = annotation.table$pos)

dim(mapping)
head(mapping)
```

Ok, so now the object `mapping` should have all 850,000+ probes from the Illumina annotation, along with which chromosome they appear on, and what position they bind to. We only need the probes that we tested in our EWAS. We can accomplish that using a `left_join`. We will then format the data so that we can write it out as a `.bed` file. 

```{r filename = "R"}
bed <- left_join(EWAS_res, mapping, by = "Name") 

bed_for_combp <- bed %>% 
  dplyr::mutate(start = pos,
                end = pos + 51) %>% 
  dplyr::select(chrom, start, end, pval)


```

The resulting table should look something like this:

```{r}
#| echo: false
#| eval: true

mapping.short <- head(mapping)

mapping.short$p <- runif(6, min = 0, max = 1)

mapping.short %>% 
  dplyr::mutate(start = pos,
                end = pos + 51) %>% 
  select(chrom, start, end, p)
```

It is ok if you have not sorted on any particular column yet. That will be the next step. If your table looks like this, then we can write it out as a `.bed` file using the following: 

```{r filename = "R"}
data.table::fwrite(bed_for_combp, file = here::here("path/to/your/file.bed"),
                   sep = "\t",
                   row.names = F,
                   col.names = F)
```

Awesome! You have written out your `.bed` file. Time to go back to the command line.

## Creating a sorted `.bed` file

Great now it is time to create a sorted `.bed` file, attach the appropriate column names back in, and run comb-p! Ideally, you should have your `.bed` file stored in its own folder because the following steps will create quite a few files. 

```{bash filename = "Terminal"}
#Go to the folder where your .bed file is stored
cd path/to/your/folder

#Run sort from bedtools
sortBed -i input.bed > sorted.bed

#Attach the proper column names
echo -e "chrom\tstart\tend\trawp" | cat - sorted.bed > sorted_for_combp.bed
```

Great! You have created your file which is ready to go! Time for the grand finale!

## Running Comb-p

Now it is time to run comb-p. This step may take some patience. If you follow the instructions as I have outlined them here, everything *should* run smoothly. Please note that some of the settings below are customizable and context-specific. Please make sure you understand the various settings before running this code.  Assuming you are still in the same directory in your terminal:

```{bash filename = "Terminal"}
comb-p pipeline -c 4 --seed 0.1 --dist 750 -p combp_res.bed --anno hg19 sorted_for_combp.bed
```

You're done! The results file will be something like "combp_res.bed.anno.hg19.bed" and you can read it back in like you would any tab-delimmited file and manipulate it to your liking. 

